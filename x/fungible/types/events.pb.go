// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: musechain/musecore/fungible/events.proto

package types

import (
	fmt "fmt"
	coin "github.com/RWAs-labs/muse/pkg/coin"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventSystemContractUpdated struct {
	MsgTypeUrl         string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	NewContractAddress string `protobuf:"bytes,2,opt,name=new_contract_address,json=newContractAddress,proto3" json:"new_contract_address,omitempty"`
	OldContractAddress string `protobuf:"bytes,3,opt,name=old_contract_address,json=oldContractAddress,proto3" json:"old_contract_address,omitempty"`
	Signer             string `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventSystemContractUpdated) Reset()         { *m = EventSystemContractUpdated{} }
func (m *EventSystemContractUpdated) String() string { return proto.CompactTextString(m) }
func (*EventSystemContractUpdated) ProtoMessage()    {}
func (*EventSystemContractUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7727475a8ec95a6, []int{0}
}
func (m *EventSystemContractUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSystemContractUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSystemContractUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSystemContractUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSystemContractUpdated.Merge(m, src)
}
func (m *EventSystemContractUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventSystemContractUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSystemContractUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventSystemContractUpdated proto.InternalMessageInfo

func (m *EventSystemContractUpdated) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventSystemContractUpdated) GetNewContractAddress() string {
	if m != nil {
		return m.NewContractAddress
	}
	return ""
}

func (m *EventSystemContractUpdated) GetOldContractAddress() string {
	if m != nil {
		return m.OldContractAddress
	}
	return ""
}

func (m *EventSystemContractUpdated) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type EventMRC20Deployed struct {
	MsgTypeUrl string        `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	ChainId    int64         `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Contract   string        `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	Name       string        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Symbol     string        `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals   int64         `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
	CoinType   coin.CoinType `protobuf:"varint,7,opt,name=coin_type,json=coinType,proto3,enum=musechain.musecore.pkg.coin.CoinType" json:"coin_type,omitempty"`
	Erc20      string        `protobuf:"bytes,8,opt,name=erc20,proto3" json:"erc20,omitempty"`
	GasLimit   int64         `protobuf:"varint,9,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (m *EventMRC20Deployed) Reset()         { *m = EventMRC20Deployed{} }
func (m *EventMRC20Deployed) String() string { return proto.CompactTextString(m) }
func (*EventMRC20Deployed) ProtoMessage()    {}
func (*EventMRC20Deployed) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7727475a8ec95a6, []int{1}
}
func (m *EventMRC20Deployed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMRC20Deployed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMRC20Deployed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMRC20Deployed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMRC20Deployed.Merge(m, src)
}
func (m *EventMRC20Deployed) XXX_Size() int {
	return m.Size()
}
func (m *EventMRC20Deployed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMRC20Deployed.DiscardUnknown(m)
}

var xxx_messageInfo_EventMRC20Deployed proto.InternalMessageInfo

func (m *EventMRC20Deployed) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventMRC20Deployed) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *EventMRC20Deployed) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *EventMRC20Deployed) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventMRC20Deployed) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *EventMRC20Deployed) GetDecimals() int64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *EventMRC20Deployed) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Muse
}

func (m *EventMRC20Deployed) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

func (m *EventMRC20Deployed) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

type EventMRC20WithdrawFeeUpdated struct {
	MsgTypeUrl     string        `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	ChainId        int64         `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CoinType       coin.CoinType `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=musechain.musecore.pkg.coin.CoinType" json:"coin_type,omitempty"`
	Mrc20Address   string        `protobuf:"bytes,4,opt,name=mrc20_address,json=mrc20Address,proto3" json:"mrc20_address,omitempty"`
	OldWithdrawFee string        `protobuf:"bytes,5,opt,name=old_withdraw_fee,json=oldWithdrawFee,proto3" json:"old_withdraw_fee,omitempty"`
	NewWithdrawFee string        `protobuf:"bytes,6,opt,name=new_withdraw_fee,json=newWithdrawFee,proto3" json:"new_withdraw_fee,omitempty"`
	Signer         string        `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
	OldGasLimit    string        `protobuf:"bytes,8,opt,name=old_gas_limit,json=oldGasLimit,proto3" json:"old_gas_limit,omitempty"`
	NewGasLimit    string        `protobuf:"bytes,9,opt,name=new_gas_limit,json=newGasLimit,proto3" json:"new_gas_limit,omitempty"`
}

func (m *EventMRC20WithdrawFeeUpdated) Reset()         { *m = EventMRC20WithdrawFeeUpdated{} }
func (m *EventMRC20WithdrawFeeUpdated) String() string { return proto.CompactTextString(m) }
func (*EventMRC20WithdrawFeeUpdated) ProtoMessage()    {}
func (*EventMRC20WithdrawFeeUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7727475a8ec95a6, []int{2}
}
func (m *EventMRC20WithdrawFeeUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMRC20WithdrawFeeUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMRC20WithdrawFeeUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMRC20WithdrawFeeUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMRC20WithdrawFeeUpdated.Merge(m, src)
}
func (m *EventMRC20WithdrawFeeUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventMRC20WithdrawFeeUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMRC20WithdrawFeeUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventMRC20WithdrawFeeUpdated proto.InternalMessageInfo

func (m *EventMRC20WithdrawFeeUpdated) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventMRC20WithdrawFeeUpdated) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *EventMRC20WithdrawFeeUpdated) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Muse
}

func (m *EventMRC20WithdrawFeeUpdated) GetMrc20Address() string {
	if m != nil {
		return m.Mrc20Address
	}
	return ""
}

func (m *EventMRC20WithdrawFeeUpdated) GetOldWithdrawFee() string {
	if m != nil {
		return m.OldWithdrawFee
	}
	return ""
}

func (m *EventMRC20WithdrawFeeUpdated) GetNewWithdrawFee() string {
	if m != nil {
		return m.NewWithdrawFee
	}
	return ""
}

func (m *EventMRC20WithdrawFeeUpdated) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *EventMRC20WithdrawFeeUpdated) GetOldGasLimit() string {
	if m != nil {
		return m.OldGasLimit
	}
	return ""
}

func (m *EventMRC20WithdrawFeeUpdated) GetNewGasLimit() string {
	if m != nil {
		return m.NewGasLimit
	}
	return ""
}

type EventMRC20Paused struct {
	MsgTypeUrl     string   `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	Mrc20Addresses []string `protobuf:"bytes,2,rep,name=mrc20_addresses,json=mrc20Addresses,proto3" json:"mrc20_addresses,omitempty"`
	Signer         string   `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventMRC20Paused) Reset()         { *m = EventMRC20Paused{} }
func (m *EventMRC20Paused) String() string { return proto.CompactTextString(m) }
func (*EventMRC20Paused) ProtoMessage()    {}
func (*EventMRC20Paused) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7727475a8ec95a6, []int{3}
}
func (m *EventMRC20Paused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMRC20Paused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMRC20Paused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMRC20Paused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMRC20Paused.Merge(m, src)
}
func (m *EventMRC20Paused) XXX_Size() int {
	return m.Size()
}
func (m *EventMRC20Paused) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMRC20Paused.DiscardUnknown(m)
}

var xxx_messageInfo_EventMRC20Paused proto.InternalMessageInfo

func (m *EventMRC20Paused) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventMRC20Paused) GetMrc20Addresses() []string {
	if m != nil {
		return m.Mrc20Addresses
	}
	return nil
}

func (m *EventMRC20Paused) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type EventMRC20Unpaused struct {
	MsgTypeUrl     string   `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	Mrc20Addresses []string `protobuf:"bytes,2,rep,name=mrc20_addresses,json=mrc20Addresses,proto3" json:"mrc20_addresses,omitempty"`
	Signer         string   `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventMRC20Unpaused) Reset()         { *m = EventMRC20Unpaused{} }
func (m *EventMRC20Unpaused) String() string { return proto.CompactTextString(m) }
func (*EventMRC20Unpaused) ProtoMessage()    {}
func (*EventMRC20Unpaused) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7727475a8ec95a6, []int{4}
}
func (m *EventMRC20Unpaused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventMRC20Unpaused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventMRC20Unpaused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventMRC20Unpaused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventMRC20Unpaused.Merge(m, src)
}
func (m *EventMRC20Unpaused) XXX_Size() int {
	return m.Size()
}
func (m *EventMRC20Unpaused) XXX_DiscardUnknown() {
	xxx_messageInfo_EventMRC20Unpaused.DiscardUnknown(m)
}

var xxx_messageInfo_EventMRC20Unpaused proto.InternalMessageInfo

func (m *EventMRC20Unpaused) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventMRC20Unpaused) GetMrc20Addresses() []string {
	if m != nil {
		return m.Mrc20Addresses
	}
	return nil
}

func (m *EventMRC20Unpaused) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type EventSystemContractsDeployed struct {
	MsgTypeUrl       string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	UniswapV2Factory string `protobuf:"bytes,2,opt,name=uniswap_v2_factory,json=uniswapV2Factory,proto3" json:"uniswap_v2_factory,omitempty"`
	Wmuse            string `protobuf:"bytes,3,opt,name=wmuse,proto3" json:"wmuse,omitempty"`
	UniswapV2Router  string `protobuf:"bytes,4,opt,name=uniswap_v2_router,json=uniswapV2Router,proto3" json:"uniswap_v2_router,omitempty"`
	ConnectorMevm    string `protobuf:"bytes,5,opt,name=connector_mevm,json=connectorMevm,proto3" json:"connector_mevm,omitempty"`
	SystemContract   string `protobuf:"bytes,6,opt,name=system_contract,json=systemContract,proto3" json:"system_contract,omitempty"`
	Signer           string `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventSystemContractsDeployed) Reset()         { *m = EventSystemContractsDeployed{} }
func (m *EventSystemContractsDeployed) String() string { return proto.CompactTextString(m) }
func (*EventSystemContractsDeployed) ProtoMessage()    {}
func (*EventSystemContractsDeployed) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7727475a8ec95a6, []int{5}
}
func (m *EventSystemContractsDeployed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSystemContractsDeployed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSystemContractsDeployed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSystemContractsDeployed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSystemContractsDeployed.Merge(m, src)
}
func (m *EventSystemContractsDeployed) XXX_Size() int {
	return m.Size()
}
func (m *EventSystemContractsDeployed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSystemContractsDeployed.DiscardUnknown(m)
}

var xxx_messageInfo_EventSystemContractsDeployed proto.InternalMessageInfo

func (m *EventSystemContractsDeployed) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetUniswapV2Factory() string {
	if m != nil {
		return m.UniswapV2Factory
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetWmuse() string {
	if m != nil {
		return m.Wmuse
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetUniswapV2Router() string {
	if m != nil {
		return m.UniswapV2Router
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetConnectorMevm() string {
	if m != nil {
		return m.ConnectorMevm
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetSystemContract() string {
	if m != nil {
		return m.SystemContract
	}
	return ""
}

func (m *EventSystemContractsDeployed) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type EventBytecodeUpdated struct {
	MsgTypeUrl      string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	NewBytecodeHash string `protobuf:"bytes,3,opt,name=new_bytecode_hash,json=newBytecodeHash,proto3" json:"new_bytecode_hash,omitempty"`
	OldBytecodeHash string `protobuf:"bytes,4,opt,name=old_bytecode_hash,json=oldBytecodeHash,proto3" json:"old_bytecode_hash,omitempty"`
	Signer          string `protobuf:"bytes,5,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventBytecodeUpdated) Reset()         { *m = EventBytecodeUpdated{} }
func (m *EventBytecodeUpdated) String() string { return proto.CompactTextString(m) }
func (*EventBytecodeUpdated) ProtoMessage()    {}
func (*EventBytecodeUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7727475a8ec95a6, []int{6}
}
func (m *EventBytecodeUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBytecodeUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBytecodeUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBytecodeUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBytecodeUpdated.Merge(m, src)
}
func (m *EventBytecodeUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventBytecodeUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBytecodeUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventBytecodeUpdated proto.InternalMessageInfo

func (m *EventBytecodeUpdated) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventBytecodeUpdated) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *EventBytecodeUpdated) GetNewBytecodeHash() string {
	if m != nil {
		return m.NewBytecodeHash
	}
	return ""
}

func (m *EventBytecodeUpdated) GetOldBytecodeHash() string {
	if m != nil {
		return m.OldBytecodeHash
	}
	return ""
}

func (m *EventBytecodeUpdated) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type EventGatewayContractUpdated struct {
	MsgTypeUrl         string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	NewContractAddress string `protobuf:"bytes,2,opt,name=new_contract_address,json=newContractAddress,proto3" json:"new_contract_address,omitempty"`
	OldContractAddress string `protobuf:"bytes,3,opt,name=old_contract_address,json=oldContractAddress,proto3" json:"old_contract_address,omitempty"`
	Signer             string `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventGatewayContractUpdated) Reset()         { *m = EventGatewayContractUpdated{} }
func (m *EventGatewayContractUpdated) String() string { return proto.CompactTextString(m) }
func (*EventGatewayContractUpdated) ProtoMessage()    {}
func (*EventGatewayContractUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7727475a8ec95a6, []int{7}
}
func (m *EventGatewayContractUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventGatewayContractUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventGatewayContractUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventGatewayContractUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventGatewayContractUpdated.Merge(m, src)
}
func (m *EventGatewayContractUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventGatewayContractUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventGatewayContractUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventGatewayContractUpdated proto.InternalMessageInfo

func (m *EventGatewayContractUpdated) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventGatewayContractUpdated) GetNewContractAddress() string {
	if m != nil {
		return m.NewContractAddress
	}
	return ""
}

func (m *EventGatewayContractUpdated) GetOldContractAddress() string {
	if m != nil {
		return m.OldContractAddress
	}
	return ""
}

func (m *EventGatewayContractUpdated) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func init() {
	proto.RegisterType((*EventSystemContractUpdated)(nil), "musechain.musecore.fungible.EventSystemContractUpdated")
	proto.RegisterType((*EventMRC20Deployed)(nil), "musechain.musecore.fungible.EventMRC20Deployed")
	proto.RegisterType((*EventMRC20WithdrawFeeUpdated)(nil), "musechain.musecore.fungible.EventMRC20WithdrawFeeUpdated")
	proto.RegisterType((*EventMRC20Paused)(nil), "musechain.musecore.fungible.EventMRC20Paused")
	proto.RegisterType((*EventMRC20Unpaused)(nil), "musechain.musecore.fungible.EventMRC20Unpaused")
	proto.RegisterType((*EventSystemContractsDeployed)(nil), "musechain.musecore.fungible.EventSystemContractsDeployed")
	proto.RegisterType((*EventBytecodeUpdated)(nil), "musechain.musecore.fungible.EventBytecodeUpdated")
	proto.RegisterType((*EventGatewayContractUpdated)(nil), "musechain.musecore.fungible.EventGatewayContractUpdated")
}

func init() {
	proto.RegisterFile("musechain/musecore/fungible/events.proto", fileDescriptor_b7727475a8ec95a6)
}

var fileDescriptor_b7727475a8ec95a6 = []byte{
	// 775 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xdd, 0x4e, 0xdb, 0x48,
	0x14, 0xc6, 0x04, 0x02, 0x19, 0x7e, 0x12, 0xac, 0x68, 0xe5, 0x0d, 0xab, 0x08, 0x65, 0x97, 0xdd,
	0x2c, 0xda, 0x4d, 0x50, 0xfa, 0x04, 0xfc, 0x14, 0x5a, 0xa9, 0x48, 0x55, 0x5a, 0x8a, 0xd4, 0x1b,
	0x6b, 0x62, 0x1f, 0x1c, 0x0b, 0x7b, 0xc6, 0xf2, 0x8c, 0x63, 0xfc, 0x16, 0xbd, 0xec, 0x43, 0xf4,
	0x09, 0xda, 0x17, 0xe8, 0x25, 0x52, 0x6f, 0x7a, 0x59, 0xc1, 0x4b, 0xf4, 0xb2, 0x9a, 0xf1, 0xd8,
	0xb1, 0x29, 0x20, 0xe8, 0x45, 0xa5, 0xde, 0x44, 0x73, 0x26, 0xdf, 0x9c, 0xf3, 0x9d, 0xcf, 0xdf,
	0x99, 0x41, 0x5d, 0x3f, 0x62, 0x60, 0x8d, 0xb1, 0x4b, 0xfa, 0x72, 0x45, 0x43, 0xe8, 0x9f, 0x46,
	0xc4, 0x71, 0x47, 0x1e, 0xf4, 0x61, 0x02, 0x84, 0xb3, 0x5e, 0x10, 0x52, 0x4e, 0xf5, 0xf5, 0x1c,
	0xd9, 0xcb, 0x90, 0xbd, 0x0c, 0xd9, 0xfa, 0xeb, 0xae, 0x34, 0xfc, 0x3c, 0x4d, 0xd1, 0x6a, 0x3a,
	0xd4, 0xa1, 0x72, 0xd9, 0x17, 0x2b, 0xb5, 0xfb, 0xf7, 0x0d, 0x67, 0x83, 0x33, 0xa7, 0x6f, 0x51,
	0x97, 0xc8, 0x9f, 0x14, 0xd7, 0x79, 0xaf, 0xa1, 0xd6, 0x63, 0xc1, 0xe8, 0x45, 0xc2, 0x38, 0xf8,
	0x7b, 0x94, 0xf0, 0x10, 0x5b, 0xfc, 0x38, 0xb0, 0x31, 0x07, 0x5b, 0xdf, 0x40, 0xcb, 0x3e, 0x73,
	0x4c, 0x9e, 0x04, 0x60, 0x46, 0xa1, 0x67, 0x68, 0x1b, 0x5a, 0xb7, 0x36, 0x44, 0x3e, 0x73, 0x5e,
	0x26, 0x01, 0x1c, 0x87, 0x9e, 0xbe, 0x8d, 0x9a, 0x04, 0x62, 0xd3, 0x52, 0x07, 0x4d, 0x6c, 0xdb,
	0x21, 0x30, 0x66, 0xcc, 0x4a, 0xa4, 0x4e, 0x20, 0xce, 0x72, 0xee, 0xa4, 0xff, 0x88, 0x13, 0xd4,
	0xb3, 0xbf, 0x3f, 0x51, 0x49, 0x4f, 0x50, 0xcf, 0xbe, 0x7e, 0xe2, 0x37, 0x54, 0x65, 0xae, 0x43,
	0x20, 0x34, 0xe6, 0x24, 0x46, 0x45, 0x9d, 0x77, 0xb3, 0x48, 0x97, 0xe4, 0x8f, 0x86, 0x7b, 0x83,
	0xed, 0x7d, 0x08, 0x3c, 0x9a, 0xdc, 0x8b, 0xf4, 0xef, 0x68, 0x51, 0x6a, 0x63, 0xba, 0xb6, 0x24,
	0x5a, 0x19, 0x2e, 0xc8, 0xf8, 0xa9, 0xad, 0xb7, 0xd0, 0x62, 0xc6, 0x4c, 0x31, 0xca, 0x63, 0x5d,
	0x47, 0x73, 0x04, 0xfb, 0xa0, 0x58, 0xc8, 0xb5, 0xe4, 0x96, 0xf8, 0x23, 0xea, 0x19, 0xf3, 0x8a,
	0x9b, 0x8c, 0x44, 0x1e, 0x1b, 0x2c, 0xd7, 0xc7, 0x1e, 0x33, 0xaa, 0xb2, 0x44, 0x1e, 0xeb, 0xbb,
	0xa8, 0x26, 0x3e, 0x81, 0x64, 0x68, 0x2c, 0x6c, 0x68, 0xdd, 0xd5, 0xc1, 0x66, 0xef, 0x06, 0x27,
	0x04, 0x67, 0x4e, 0x4f, 0x7e, 0xab, 0x3d, 0xea, 0x12, 0xc1, 0x5d, 0x70, 0x49, 0x57, 0x7a, 0x13,
	0xcd, 0x43, 0x68, 0x0d, 0xb6, 0x8d, 0x45, 0x59, 0x36, 0x0d, 0xf4, 0x75, 0x54, 0x73, 0x30, 0x33,
	0x3d, 0xd7, 0x77, 0xb9, 0x51, 0x4b, 0xcb, 0x3a, 0x98, 0x3d, 0x13, 0x71, 0xe7, 0xeb, 0x2c, 0xfa,
	0x63, 0x2a, 0xd7, 0x89, 0xcb, 0xc7, 0x76, 0x88, 0xe3, 0x03, 0x80, 0xfb, 0x7f, 0xed, 0x3b, 0x84,
	0x2b, 0x35, 0x55, 0xf9, 0xb1, 0xa6, 0xfe, 0x44, 0x2b, 0xbe, 0xe8, 0x23, 0xf7, 0x44, 0xaa, 0xf4,
	0xb2, 0xdc, 0xcc, 0xdc, 0xd0, 0x45, 0x0d, 0xe1, 0x9f, 0x58, 0xf1, 0x37, 0x4f, 0x01, 0x94, 0xf6,
	0xab, 0xd4, 0xb3, 0x0b, 0x6d, 0x09, 0xa4, 0xf0, 0x66, 0x09, 0x59, 0x4d, 0x91, 0x04, 0xe2, 0x22,
	0x72, 0xea, 0xb0, 0x85, 0xa2, 0xc3, 0xf4, 0x0e, 0x5a, 0x11, 0xb5, 0xa6, 0x9a, 0xa6, 0x6a, 0x2f,
	0x51, 0xcf, 0x3e, 0x54, 0xb2, 0x0a, 0x8c, 0xa8, 0x52, 0xd6, 0xbd, 0x36, 0x5c, 0x22, 0x10, 0x67,
	0x98, 0x4e, 0x84, 0x1a, 0x53, 0xe5, 0x9f, 0xe3, 0x88, 0xdd, 0x4b, 0xed, 0x7f, 0x50, 0xbd, 0x24,
	0x07, 0x88, 0xb1, 0xaa, 0x08, 0xfa, 0x45, 0x41, 0xa0, 0x38, 0x20, 0x95, 0xd2, 0x80, 0xc4, 0xc5,
	0xf9, 0x38, 0x26, 0xc1, 0x4f, 0x2b, 0xfc, 0x36, 0xb3, 0x5a, 0xf9, 0x5a, 0x61, 0x0f, 0x98, 0xd1,
	0xff, 0x90, 0x1e, 0x11, 0x97, 0xc5, 0x38, 0x30, 0x27, 0x03, 0xf3, 0x14, 0x5b, 0x9c, 0x86, 0x89,
	0xba, 0x56, 0x1a, 0xea, 0x9f, 0x57, 0x83, 0x83, 0x74, 0x5f, 0x8c, 0x43, 0x2c, 0x2c, 0xa6, 0x78,
	0xa4, 0x81, 0xbe, 0x85, 0xd6, 0x0a, 0x39, 0x42, 0x1a, 0xf1, 0xfc, 0x0e, 0xa9, 0xe7, 0x29, 0x86,
	0x72, 0x5b, 0xdf, 0x44, 0xab, 0x16, 0x25, 0x04, 0x44, 0x3e, 0xd3, 0x87, 0x89, 0xaf, 0x4c, 0xb5,
	0x92, 0xef, 0x1e, 0xc1, 0xc4, 0x17, 0xd2, 0x30, 0xd9, 0x53, 0x7e, 0x81, 0x65, 0x96, 0x62, 0xa5,
	0x56, 0x6f, 0xb3, 0x54, 0xe7, 0x93, 0x86, 0x9a, 0x52, 0x9a, 0xdd, 0x84, 0x83, 0x45, 0xed, 0x07,
	0x4c, 0xdf, 0xbf, 0xa8, 0x71, 0xcb, 0x3d, 0x5b, 0xb7, 0xae, 0x5d, 0x99, 0x5b, 0x68, 0x4d, 0x98,
	0x72, 0xa4, 0x6a, 0x98, 0x63, 0xcc, 0xc6, 0x4a, 0x9b, 0x3a, 0x81, 0x38, 0xab, 0xfd, 0x04, 0xb3,
	0xb1, 0xc0, 0x0a, 0x93, 0x97, 0xb1, 0x4a, 0x25, 0xea, 0xd9, 0x25, 0xec, 0xb4, 0xab, 0xf9, 0x52,
	0x57, 0x1f, 0x34, 0xb4, 0x2e, 0xbb, 0x3a, 0xc4, 0x1c, 0x62, 0x9c, 0xfc, 0x52, 0x0f, 0xc9, 0xee,
	0xfe, 0xc7, 0xcb, 0xb6, 0x76, 0x71, 0xd9, 0xd6, 0xbe, 0x5c, 0xb6, 0xb5, 0x37, 0x57, 0xed, 0x99,
	0x8b, 0xab, 0xf6, 0xcc, 0xe7, 0xab, 0xf6, 0xcc, 0xeb, 0x2d, 0xc7, 0xe5, 0xe3, 0x68, 0xd4, 0xb3,
	0xa8, 0xdf, 0x1f, 0x9e, 0xec, 0xb0, 0xff, 0x3d, 0x3c, 0x62, 0xf2, 0x49, 0xed, 0x9f, 0x17, 0x1e,
	0xe3, 0x24, 0x00, 0x36, 0xaa, 0xca, 0x27, 0xf5, 0xd1, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7,
	0x18, 0x7e, 0x98, 0xff, 0x07, 0x00, 0x00,
}

func (m *EventSystemContractUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSystemContractUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSystemContractUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldContractAddress) > 0 {
		i -= len(m.OldContractAddress)
		copy(dAtA[i:], m.OldContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewContractAddress) > 0 {
		i -= len(m.NewContractAddress)
		copy(dAtA[i:], m.NewContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMRC20Deployed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMRC20Deployed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMRC20Deployed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0x42
	}
	if m.CoinType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x38
	}
	if m.Decimals != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMRC20WithdrawFeeUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMRC20WithdrawFeeUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMRC20WithdrawFeeUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewGasLimit) > 0 {
		i -= len(m.NewGasLimit)
		copy(dAtA[i:], m.NewGasLimit)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewGasLimit)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OldGasLimit) > 0 {
		i -= len(m.OldGasLimit)
		copy(dAtA[i:], m.OldGasLimit)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldGasLimit)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NewWithdrawFee) > 0 {
		i -= len(m.NewWithdrawFee)
		copy(dAtA[i:], m.NewWithdrawFee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewWithdrawFee)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OldWithdrawFee) > 0 {
		i -= len(m.OldWithdrawFee)
		copy(dAtA[i:], m.OldWithdrawFee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldWithdrawFee)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Mrc20Address) > 0 {
		i -= len(m.Mrc20Address)
		copy(dAtA[i:], m.Mrc20Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Mrc20Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoinType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMRC20Paused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMRC20Paused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMRC20Paused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mrc20Addresses) > 0 {
		for iNdEx := len(m.Mrc20Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Mrc20Addresses[iNdEx])
			copy(dAtA[i:], m.Mrc20Addresses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Mrc20Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventMRC20Unpaused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventMRC20Unpaused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventMRC20Unpaused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mrc20Addresses) > 0 {
		for iNdEx := len(m.Mrc20Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Mrc20Addresses[iNdEx])
			copy(dAtA[i:], m.Mrc20Addresses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Mrc20Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSystemContractsDeployed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSystemContractsDeployed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSystemContractsDeployed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SystemContract) > 0 {
		i -= len(m.SystemContract)
		copy(dAtA[i:], m.SystemContract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SystemContract)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConnectorMevm) > 0 {
		i -= len(m.ConnectorMevm)
		copy(dAtA[i:], m.ConnectorMevm)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ConnectorMevm)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UniswapV2Router) > 0 {
		i -= len(m.UniswapV2Router)
		copy(dAtA[i:], m.UniswapV2Router)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.UniswapV2Router)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Wmuse) > 0 {
		i -= len(m.Wmuse)
		copy(dAtA[i:], m.Wmuse)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Wmuse)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UniswapV2Factory) > 0 {
		i -= len(m.UniswapV2Factory)
		copy(dAtA[i:], m.UniswapV2Factory)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.UniswapV2Factory)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBytecodeUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBytecodeUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBytecodeUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OldBytecodeHash) > 0 {
		i -= len(m.OldBytecodeHash)
		copy(dAtA[i:], m.OldBytecodeHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldBytecodeHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewBytecodeHash) > 0 {
		i -= len(m.NewBytecodeHash)
		copy(dAtA[i:], m.NewBytecodeHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewBytecodeHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventGatewayContractUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventGatewayContractUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventGatewayContractUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldContractAddress) > 0 {
		i -= len(m.OldContractAddress)
		copy(dAtA[i:], m.OldContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewContractAddress) > 0 {
		i -= len(m.NewContractAddress)
		copy(dAtA[i:], m.NewContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSystemContractUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventMRC20Deployed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovEvents(uint64(m.ChainId))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovEvents(uint64(m.Decimals))
	}
	if m.CoinType != 0 {
		n += 1 + sovEvents(uint64(m.CoinType))
	}
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovEvents(uint64(m.GasLimit))
	}
	return n
}

func (m *EventMRC20WithdrawFeeUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovEvents(uint64(m.ChainId))
	}
	if m.CoinType != 0 {
		n += 1 + sovEvents(uint64(m.CoinType))
	}
	l = len(m.Mrc20Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldWithdrawFee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewWithdrawFee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldGasLimit)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewGasLimit)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventMRC20Paused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Mrc20Addresses) > 0 {
		for _, s := range m.Mrc20Addresses {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventMRC20Unpaused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Mrc20Addresses) > 0 {
		for _, s := range m.Mrc20Addresses {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventSystemContractsDeployed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.UniswapV2Factory)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Wmuse)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.UniswapV2Router)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ConnectorMevm)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SystemContract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventBytecodeUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewBytecodeHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldBytecodeHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventGatewayContractUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSystemContractUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSystemContractUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSystemContractUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMRC20Deployed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMRC20Deployed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMRC20Deployed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMRC20WithdrawFeeUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMRC20WithdrawFeeUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMRC20WithdrawFeeUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mrc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mrc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldWithdrawFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldWithdrawFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewWithdrawFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewWithdrawFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldGasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldGasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewGasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMRC20Paused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMRC20Paused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMRC20Paused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mrc20Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mrc20Addresses = append(m.Mrc20Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventMRC20Unpaused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMRC20Unpaused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMRC20Unpaused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mrc20Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mrc20Addresses = append(m.Mrc20Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSystemContractsDeployed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSystemContractsDeployed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSystemContractsDeployed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniswapV2Factory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniswapV2Factory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wmuse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wmuse = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniswapV2Router", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniswapV2Router = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectorMevm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectorMevm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBytecodeUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBytecodeUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBytecodeUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBytecodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewBytecodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldBytecodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldBytecodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventGatewayContractUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventGatewayContractUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventGatewayContractUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
