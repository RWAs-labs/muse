// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: musechain/musecore/crosschain/rate_limiter_flags.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	coin "github.com/RWAs-labs/muse/pkg/coin"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RateLimiterFlags struct {
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// window in blocks
	Window int64 `protobuf:"varint,2,opt,name=window,proto3" json:"window,omitempty"`
	// rate in amuse per block
	Rate cosmossdk_io_math.Uint `protobuf:"bytes,3,opt,name=rate,proto3,customtype=cosmossdk.io/math.Uint" json:"rate"`
	// conversion in amuse per token
	Conversions []Conversion `protobuf:"bytes,4,rep,name=conversions,proto3" json:"conversions"`
}

func (m *RateLimiterFlags) Reset()         { *m = RateLimiterFlags{} }
func (m *RateLimiterFlags) String() string { return proto.CompactTextString(m) }
func (*RateLimiterFlags) ProtoMessage()    {}
func (*RateLimiterFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_afc9b7357bf1306d, []int{0}
}
func (m *RateLimiterFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateLimiterFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateLimiterFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateLimiterFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimiterFlags.Merge(m, src)
}
func (m *RateLimiterFlags) XXX_Size() int {
	return m.Size()
}
func (m *RateLimiterFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimiterFlags.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimiterFlags proto.InternalMessageInfo

func (m *RateLimiterFlags) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *RateLimiterFlags) GetWindow() int64 {
	if m != nil {
		return m.Window
	}
	return 0
}

func (m *RateLimiterFlags) GetConversions() []Conversion {
	if m != nil {
		return m.Conversions
	}
	return nil
}

type Conversion struct {
	Mrc20 string                      `protobuf:"bytes,1,opt,name=mrc20,proto3" json:"mrc20,omitempty"`
	Rate  cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=rate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"rate"`
}

func (m *Conversion) Reset()         { *m = Conversion{} }
func (m *Conversion) String() string { return proto.CompactTextString(m) }
func (*Conversion) ProtoMessage()    {}
func (*Conversion) Descriptor() ([]byte, []int) {
	return fileDescriptor_afc9b7357bf1306d, []int{1}
}
func (m *Conversion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Conversion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Conversion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Conversion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conversion.Merge(m, src)
}
func (m *Conversion) XXX_Size() int {
	return m.Size()
}
func (m *Conversion) XXX_DiscardUnknown() {
	xxx_messageInfo_Conversion.DiscardUnknown(m)
}

var xxx_messageInfo_Conversion proto.InternalMessageInfo

func (m *Conversion) GetMrc20() string {
	if m != nil {
		return m.Mrc20
	}
	return ""
}

type AssetRate struct {
	ChainId  int64                       `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Asset    string                      `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Decimals uint32                      `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	CoinType coin.CoinType               `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3,enum=musechain.musecore.pkg.coin.CoinType" json:"coin_type,omitempty"`
	Rate     cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=rate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"rate"`
}

func (m *AssetRate) Reset()         { *m = AssetRate{} }
func (m *AssetRate) String() string { return proto.CompactTextString(m) }
func (*AssetRate) ProtoMessage()    {}
func (*AssetRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_afc9b7357bf1306d, []int{2}
}
func (m *AssetRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetRate.Merge(m, src)
}
func (m *AssetRate) XXX_Size() int {
	return m.Size()
}
func (m *AssetRate) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetRate.DiscardUnknown(m)
}

var xxx_messageInfo_AssetRate proto.InternalMessageInfo

func (m *AssetRate) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *AssetRate) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *AssetRate) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *AssetRate) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Muse
}

func init() {
	proto.RegisterType((*RateLimiterFlags)(nil), "musechain.musecore.crosschain.RateLimiterFlags")
	proto.RegisterType((*Conversion)(nil), "musechain.musecore.crosschain.Conversion")
	proto.RegisterType((*AssetRate)(nil), "musechain.musecore.crosschain.AssetRate")
}

func init() {
	proto.RegisterFile("musechain/musecore/crosschain/rate_limiter_flags.proto", fileDescriptor_afc9b7357bf1306d)
}

var fileDescriptor_afc9b7357bf1306d = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x41, 0x6b, 0x13, 0x41,
	0x18, 0xcd, 0x34, 0x69, 0x4d, 0xa6, 0x28, 0x32, 0x94, 0xb2, 0x44, 0xdc, 0x2e, 0x11, 0x65, 0x05,
	0x9d, 0x95, 0x08, 0x7a, 0xee, 0x56, 0x0a, 0x42, 0x2f, 0x0e, 0x8a, 0xa0, 0x87, 0x30, 0x3b, 0x3b,
	0x6e, 0x86, 0xec, 0xce, 0x2c, 0x3b, 0x53, 0x6b, 0xfe, 0x85, 0x3f, 0xab, 0xe0, 0xa5, 0x07, 0x0f,
	0xe2, 0xa1, 0x48, 0xf2, 0x47, 0x64, 0x66, 0x36, 0xdb, 0x82, 0x45, 0xe8, 0x25, 0x7c, 0x2f, 0xbc,
	0xb7, 0xef, 0x7d, 0x6f, 0x3e, 0xf8, 0xaa, 0x3a, 0xd5, 0x9c, 0xcd, 0xa9, 0x90, 0x89, 0x9b, 0x54,
	0xc3, 0x13, 0xd6, 0x28, 0xad, 0xfd, 0x7f, 0x0d, 0x35, 0x7c, 0x56, 0x8a, 0x4a, 0x18, 0xde, 0xcc,
	0xbe, 0x94, 0xb4, 0xd0, 0xb8, 0x6e, 0x94, 0x51, 0xe8, 0x61, 0xa7, 0xc3, 0x1b, 0x1d, 0xbe, 0xd2,
	0x8d, 0xf7, 0x0a, 0x55, 0x28, 0xc7, 0x4c, 0xec, 0xe4, 0x45, 0xe3, 0x27, 0x37, 0x98, 0xd5, 0x8b,
	0x22, 0x61, 0x4a, 0x48, 0xf7, 0xe3, 0x79, 0x93, 0x1f, 0x00, 0xde, 0x27, 0xd4, 0xf0, 0x13, 0x6f,
	0x7c, 0x6c, 0x7d, 0x51, 0x00, 0xef, 0x70, 0x49, 0xb3, 0x92, 0xe7, 0x01, 0x88, 0x40, 0x3c, 0x24,
	0x1b, 0x88, 0xf6, 0xe1, 0xce, 0x99, 0x90, 0xb9, 0x3a, 0x0b, 0xb6, 0x22, 0x10, 0xf7, 0x49, 0x8b,
	0xd0, 0x14, 0x0e, 0x6c, 0xfe, 0xa0, 0x1f, 0x81, 0x78, 0x94, 0x86, 0xe7, 0x97, 0x07, 0xbd, 0xdf,
	0x97, 0x07, 0xfb, 0x4c, 0xe9, 0x4a, 0x69, 0x9d, 0x2f, 0xb0, 0x50, 0x49, 0x45, 0xcd, 0x1c, 0x7f,
	0x10, 0xd2, 0x10, 0xc7, 0x45, 0xef, 0xe0, 0x2e, 0x53, 0xf2, 0x2b, 0x6f, 0xb4, 0x50, 0x52, 0x07,
	0x83, 0xa8, 0x1f, 0xef, 0x4e, 0x9f, 0xe2, 0xff, 0x6e, 0x8b, 0x8f, 0x3a, 0x45, 0x3a, 0xb0, 0x2e,
	0xe4, 0xfa, 0x37, 0x26, 0x9f, 0x21, 0xbc, 0x22, 0xa0, 0x3d, 0xb8, 0x5d, 0x35, 0x6c, 0xfa, 0xc2,
	0x2d, 0x31, 0x22, 0x1e, 0xa0, 0xd7, 0x6d, 0xd4, 0x2d, 0x17, 0xf5, 0x51, 0x1b, 0xf5, 0xc1, 0xbf,
	0x51, 0x4f, 0x78, 0x41, 0xd9, 0xf2, 0x0d, 0x67, 0x3e, 0xef, 0xe4, 0x27, 0x80, 0xa3, 0x43, 0xad,
	0xb9, 0xb1, 0x7d, 0xd9, 0x8e, 0x5c, 0xa2, 0xb7, 0xbe, 0xa3, 0x3e, 0xd9, 0x40, 0x6b, 0x4b, 0x2d,
	0xcd, 0x3b, 0x10, 0x0f, 0xd0, 0x18, 0x0e, 0x73, 0xce, 0x44, 0x45, 0x4b, 0xed, 0x5a, 0xba, 0x4b,
	0x3a, 0x8c, 0x52, 0x38, 0xb2, 0x4f, 0x32, 0x33, 0xcb, 0x9a, 0x07, 0x83, 0x08, 0xc4, 0xf7, 0xa6,
	0x8f, 0x6f, 0xea, 0xa1, 0x5e, 0x14, 0xd8, 0xbd, 0xdd, 0x91, 0x12, 0xf2, 0xfd, 0xb2, 0xe6, 0x64,
	0xc8, 0xda, 0xa9, 0x5b, 0x6b, 0xfb, 0x96, 0x6b, 0xa5, 0xc7, 0xe7, 0xab, 0x10, 0x5c, 0xac, 0x42,
	0xf0, 0x67, 0x15, 0x82, 0xef, 0xeb, 0xb0, 0x77, 0xb1, 0x0e, 0x7b, 0xbf, 0xd6, 0x61, 0xef, 0xd3,
	0xb3, 0x42, 0x98, 0xf9, 0x69, 0x86, 0x99, 0xaa, 0x12, 0xf2, 0xf1, 0x50, 0x3f, 0x2f, 0x69, 0xa6,
	0xdd, 0x39, 0x25, 0xdf, 0xae, 0x5f, 0xae, 0x8d, 0xad, 0xb3, 0x1d, 0x77, 0x50, 0x2f, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x2d, 0xaa, 0x8f, 0x0f, 0xe7, 0x02, 0x00, 0x00,
}

func (m *RateLimiterFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateLimiterFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateLimiterFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conversions) > 0 {
		for iNdEx := len(m.Conversions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conversions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRateLimiterFlags(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRateLimiterFlags(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Window != 0 {
		i = encodeVarintRateLimiterFlags(dAtA, i, uint64(m.Window))
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Conversion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Conversion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Conversion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRateLimiterFlags(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Mrc20) > 0 {
		i -= len(m.Mrc20)
		copy(dAtA[i:], m.Mrc20)
		i = encodeVarintRateLimiterFlags(dAtA, i, uint64(len(m.Mrc20)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRateLimiterFlags(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.CoinType != 0 {
		i = encodeVarintRateLimiterFlags(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x20
	}
	if m.Decimals != 0 {
		i = encodeVarintRateLimiterFlags(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintRateLimiterFlags(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintRateLimiterFlags(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRateLimiterFlags(dAtA []byte, offset int, v uint64) int {
	offset -= sovRateLimiterFlags(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RateLimiterFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.Window != 0 {
		n += 1 + sovRateLimiterFlags(uint64(m.Window))
	}
	l = m.Rate.Size()
	n += 1 + l + sovRateLimiterFlags(uint64(l))
	if len(m.Conversions) > 0 {
		for _, e := range m.Conversions {
			l = e.Size()
			n += 1 + l + sovRateLimiterFlags(uint64(l))
		}
	}
	return n
}

func (m *Conversion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mrc20)
	if l > 0 {
		n += 1 + l + sovRateLimiterFlags(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovRateLimiterFlags(uint64(l))
	return n
}

func (m *AssetRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovRateLimiterFlags(uint64(m.ChainId))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovRateLimiterFlags(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovRateLimiterFlags(uint64(m.Decimals))
	}
	if m.CoinType != 0 {
		n += 1 + sovRateLimiterFlags(uint64(m.CoinType))
	}
	l = m.Rate.Size()
	n += 1 + l + sovRateLimiterFlags(uint64(l))
	return n
}

func sovRateLimiterFlags(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRateLimiterFlags(x uint64) (n int) {
	return sovRateLimiterFlags(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RateLimiterFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRateLimiterFlags
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateLimiterFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateLimiterFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Window", wireType)
			}
			m.Window = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Window |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conversions = append(m.Conversions, Conversion{})
			if err := m.Conversions[len(m.Conversions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRateLimiterFlags(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Conversion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRateLimiterFlags
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Conversion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Conversion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mrc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mrc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRateLimiterFlags(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRateLimiterFlags
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRateLimiterFlags(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRateLimiterFlags
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRateLimiterFlags(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRateLimiterFlags
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRateLimiterFlags
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRateLimiterFlags
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRateLimiterFlags
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRateLimiterFlags
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRateLimiterFlags        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRateLimiterFlags          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRateLimiterFlags = fmt.Errorf("proto: unexpected end of group")
)
