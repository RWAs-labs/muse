// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: musechain/musecore/observer/operational.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Flags for the top-level operation of museclient.
type OperationalFlags struct {
	// Height for a coordinated museclient restart.
	// Will be ignored if missed.
	RestartHeight int64 `protobuf:"varint,1,opt,name=restart_height,json=restartHeight,proto3" json:"restart_height,omitempty"`
	// Offset from the musecore block time to initiate signing.
	// Should be calculated and set based on max(museclient_core_block_latency).
	SignerBlockTimeOffset *time.Duration `protobuf:"bytes,2,opt,name=signer_block_time_offset,json=signerBlockTimeOffset,proto3,stdduration" json:"signer_block_time_offset,omitempty"`
	// Minimum version of museclient that is allowed to run. This must be either
	// a valid semver string (v23.0.1) or empty. If empty, all versions are
	// allowed.
	MinimumVersion string `protobuf:"bytes,3,opt,name=minimum_version,json=minimumVersion,proto3" json:"minimum_version,omitempty"`
}

func (m *OperationalFlags) Reset()         { *m = OperationalFlags{} }
func (m *OperationalFlags) String() string { return proto.CompactTextString(m) }
func (*OperationalFlags) ProtoMessage()    {}
func (*OperationalFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_0506de0b7378417e, []int{0}
}
func (m *OperationalFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationalFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationalFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationalFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationalFlags.Merge(m, src)
}
func (m *OperationalFlags) XXX_Size() int {
	return m.Size()
}
func (m *OperationalFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationalFlags.DiscardUnknown(m)
}

var xxx_messageInfo_OperationalFlags proto.InternalMessageInfo

func (m *OperationalFlags) GetRestartHeight() int64 {
	if m != nil {
		return m.RestartHeight
	}
	return 0
}

func (m *OperationalFlags) GetSignerBlockTimeOffset() *time.Duration {
	if m != nil {
		return m.SignerBlockTimeOffset
	}
	return nil
}

func (m *OperationalFlags) GetMinimumVersion() string {
	if m != nil {
		return m.MinimumVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*OperationalFlags)(nil), "musechain.musecore.observer.OperationalFlags")
}

func init() {
	proto.RegisterFile("musechain/musecore/observer/operational.proto", fileDescriptor_0506de0b7378417e)
}

var fileDescriptor_0506de0b7378417e = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x17, 0x27, 0x82, 0x15, 0xa7, 0x14, 0x85, 0x3a, 0x21, 0x0e, 0x41, 0x1c, 0xc2, 0x12,
	0xd0, 0x27, 0x70, 0x0c, 0xf1, 0x6e, 0x50, 0x44, 0xc5, 0x9b, 0xd2, 0xce, 0xb3, 0x34, 0xd8, 0xf4,
	0x8c, 0x24, 0x1d, 0xfa, 0x16, 0x5e, 0xfa, 0x30, 0x3e, 0x80, 0x97, 0xbb, 0xf4, 0x4e, 0xd9, 0x5e,
	0x44, 0x96, 0xac, 0xee, 0xee, 0xe4, 0xcf, 0xff, 0x9f, 0xef, 0xf0, 0x07, 0x3d, 0x55, 0x19, 0x18,
	0xe5, 0xa9, 0x2c, 0xb9, 0x9b, 0x50, 0x03, 0xc7, 0xcc, 0x80, 0x9e, 0x82, 0xe6, 0x38, 0x01, 0x9d,
	0x5a, 0x89, 0x65, 0x5a, 0xb0, 0x89, 0x46, 0x8b, 0xe1, 0xf1, 0xbf, 0x9d, 0xd5, 0x76, 0x56, 0xdb,
	0xdb, 0x07, 0x02, 0x05, 0x3a, 0x1f, 0x5f, 0x4e, 0x3e, 0xd2, 0xa6, 0x02, 0x51, 0x14, 0xc0, 0xdd,
	0x2b, 0xab, 0xc6, 0xfc, 0xb9, 0xf2, 0x4b, 0xfd, 0xff, 0xe9, 0x27, 0x09, 0xf6, 0x87, 0x6b, 0xd0,
	0x4d, 0x91, 0x0a, 0x13, 0x9e, 0x05, 0x2d, 0x0d, 0xc6, 0xa6, 0xda, 0x26, 0x39, 0x48, 0x91, 0xdb,
	0x88, 0x74, 0x48, 0xb7, 0x19, 0xef, 0xae, 0xd4, 0x5b, 0x27, 0x86, 0x8f, 0x41, 0x64, 0xa4, 0x28,
	0x41, 0x27, 0x59, 0x81, 0xa3, 0x97, 0xc4, 0x4a, 0x05, 0x09, 0x8e, 0xc7, 0x06, 0x6c, 0xb4, 0xd1,
	0x21, 0xdd, 0x9d, 0xcb, 0x23, 0xe6, 0xf1, 0xac, 0xc6, 0xb3, 0xc1, 0x0a, 0xdf, 0xdf, 0xfc, 0xf8,
	0x39, 0x21, 0xf1, 0xa1, 0x5f, 0xd0, 0x5f, 0xe6, 0xef, 0xa4, 0x82, 0xa1, 0x4b, 0x87, 0xe7, 0xc1,
	0x9e, 0x92, 0xa5, 0x54, 0x95, 0x4a, 0xa6, 0xa0, 0x8d, 0xc4, 0x32, 0x6a, 0x76, 0x48, 0x77, 0x3b,
	0x6e, 0xad, 0xe4, 0x7b, 0xaf, 0xf6, 0x07, 0x5f, 0x73, 0x4a, 0x66, 0x73, 0x4a, 0x7e, 0xe7, 0x94,
	0xbc, 0x2f, 0x68, 0x63, 0xb6, 0xa0, 0x8d, 0xef, 0x05, 0x6d, 0x3c, 0x5d, 0x08, 0x69, 0xf3, 0x2a,
	0x63, 0x23, 0x54, 0x3c, 0x7e, 0xb8, 0x36, 0xbd, 0x22, 0xcd, 0x8c, 0x6b, 0x99, 0xbf, 0xae, 0x3b,
	0xb6, 0x6f, 0x13, 0x30, 0xd9, 0x96, 0x3b, 0xef, 0xea, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x60, 0x68,
	0xa2, 0xd0, 0x8f, 0x01, 0x00, 0x00,
}

func (m *OperationalFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationalFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationalFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinimumVersion) > 0 {
		i -= len(m.MinimumVersion)
		copy(dAtA[i:], m.MinimumVersion)
		i = encodeVarintOperational(dAtA, i, uint64(len(m.MinimumVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SignerBlockTimeOffset != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.SignerBlockTimeOffset, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.SignerBlockTimeOffset):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintOperational(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x12
	}
	if m.RestartHeight != 0 {
		i = encodeVarintOperational(dAtA, i, uint64(m.RestartHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOperational(dAtA []byte, offset int, v uint64) int {
	offset -= sovOperational(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OperationalFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RestartHeight != 0 {
		n += 1 + sovOperational(uint64(m.RestartHeight))
	}
	if m.SignerBlockTimeOffset != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.SignerBlockTimeOffset)
		n += 1 + l + sovOperational(uint64(l))
	}
	l = len(m.MinimumVersion)
	if l > 0 {
		n += 1 + l + sovOperational(uint64(l))
	}
	return n
}

func sovOperational(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOperational(x uint64) (n int) {
	return sovOperational(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperationalFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperational
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationalFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationalFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestartHeight", wireType)
			}
			m.RestartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperational
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RestartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerBlockTimeOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperational
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperational
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperational
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignerBlockTimeOffset == nil {
				m.SignerBlockTimeOffset = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.SignerBlockTimeOffset, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperational
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperational
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOperational
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperational(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperational
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperational(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperational
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperational
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperational
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOperational
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOperational
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOperational
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOperational        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperational          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOperational = fmt.Errorf("proto: unexpected end of group")
)
