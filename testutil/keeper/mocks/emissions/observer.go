// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	chains "github.com/RWAs-labs/muse/pkg/chains"

	observertypes "github.com/RWAs-labs/muse/x/observer/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// EmissionObserverKeeper is an autogenerated mock type for the EmissionObserverKeeper type
type EmissionObserverKeeper struct {
	mock.Mock
}

// ClearFinalizedMaturedBallots provides a mock function with given fields: ctx, maturityBlocks, deleteAllBallots
func (_m *EmissionObserverKeeper) ClearFinalizedMaturedBallots(ctx types.Context, maturityBlocks int64, deleteAllBallots bool) {
	_m.Called(ctx, maturityBlocks, deleteAllBallots)
}

// GetAllNodeAccount provides a mock function with given fields: ctx
func (_m *EmissionObserverKeeper) GetAllNodeAccount(ctx types.Context) []observertypes.NodeAccount {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNodeAccount")
	}

	var r0 []observertypes.NodeAccount
	if rf, ok := ret.Get(0).(func(types.Context) []observertypes.NodeAccount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]observertypes.NodeAccount)
		}
	}

	return r0
}

// GetBallot provides a mock function with given fields: ctx, index
func (_m *EmissionObserverKeeper) GetBallot(ctx types.Context, index string) (observertypes.Ballot, bool) {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for GetBallot")
	}

	var r0 observertypes.Ballot
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) (observertypes.Ballot, bool)); ok {
		return rf(ctx, index)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) observertypes.Ballot); ok {
		r0 = rf(ctx, index)
	} else {
		r0 = ret.Get(0).(observertypes.Ballot)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) bool); ok {
		r1 = rf(ctx, index)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetMaturedBallots provides a mock function with given fields: ctx, maturityBlocks
func (_m *EmissionObserverKeeper) GetMaturedBallots(ctx types.Context, maturityBlocks int64) (observertypes.BallotListForHeight, bool) {
	ret := _m.Called(ctx, maturityBlocks)

	if len(ret) == 0 {
		panic("no return value specified for GetMaturedBallots")
	}

	var r0 observertypes.BallotListForHeight
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, int64) (observertypes.BallotListForHeight, bool)); ok {
		return rf(ctx, maturityBlocks)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64) observertypes.BallotListForHeight); ok {
		r0 = rf(ctx, maturityBlocks)
	} else {
		r0 = ret.Get(0).(observertypes.BallotListForHeight)
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64) bool); ok {
		r1 = rf(ctx, maturityBlocks)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetNodeAccount provides a mock function with given fields: ctx, address
func (_m *EmissionObserverKeeper) GetNodeAccount(ctx types.Context, address string) (observertypes.NodeAccount, bool) {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for GetNodeAccount")
	}

	var r0 observertypes.NodeAccount
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) (observertypes.NodeAccount, bool)); ok {
		return rf(ctx, address)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) observertypes.NodeAccount); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(observertypes.NodeAccount)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) bool); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetObserverSet provides a mock function with given fields: ctx
func (_m *EmissionObserverKeeper) GetObserverSet(ctx types.Context) (observertypes.ObserverSet, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetObserverSet")
	}

	var r0 observertypes.ObserverSet
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (observertypes.ObserverSet, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) observertypes.ObserverSet); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(observertypes.ObserverSet)
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetSupportedChains provides a mock function with given fields: ctx
func (_m *EmissionObserverKeeper) GetSupportedChains(ctx types.Context) []chains.Chain {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedChains")
	}

	var r0 []chains.Chain
	if rf, ok := ret.Get(0).(func(types.Context) []chains.Chain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chains.Chain)
		}
	}

	return r0
}

// IsNonTombstonedObserver provides a mock function with given fields: ctx, address
func (_m *EmissionObserverKeeper) IsNonTombstonedObserver(ctx types.Context, address string) bool {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for IsNonTombstonedObserver")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) bool); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewEmissionObserverKeeper creates a new instance of EmissionObserverKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmissionObserverKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmissionObserverKeeper {
	mock := &EmissionObserverKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
