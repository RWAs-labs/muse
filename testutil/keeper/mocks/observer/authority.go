// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	chains "github.com/RWAs-labs/muse/pkg/chains"
	authoritytypes "github.com/RWAs-labs/muse/x/authority/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ObserverAuthorityKeeper is an autogenerated mock type for the ObserverAuthorityKeeper type
type ObserverAuthorityKeeper struct {
	mock.Mock
}

// CheckAuthorization provides a mock function with given fields: ctx, msg
func (_m *ObserverAuthorityKeeper) CheckAuthorization(ctx types.Context, msg types.Msg) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for CheckAuthorization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, types.Msg) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdditionalChainList provides a mock function with given fields: ctx
func (_m *ObserverAuthorityKeeper) GetAdditionalChainList(ctx types.Context) []chains.Chain {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAdditionalChainList")
	}

	var r0 []chains.Chain
	if rf, ok := ret.Get(0).(func(types.Context) []chains.Chain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chains.Chain)
		}
	}

	return r0
}

// GetPolicies provides a mock function with given fields: ctx
func (_m *ObserverAuthorityKeeper) GetPolicies(ctx types.Context) (authoritytypes.Policies, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicies")
	}

	var r0 authoritytypes.Policies
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (authoritytypes.Policies, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) authoritytypes.Policies); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(authoritytypes.Policies)
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SetPolicies provides a mock function with given fields: ctx, policies
func (_m *ObserverAuthorityKeeper) SetPolicies(ctx types.Context, policies authoritytypes.Policies) {
	_m.Called(ctx, policies)
}

// NewObserverAuthorityKeeper creates a new instance of ObserverAuthorityKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObserverAuthorityKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObserverAuthorityKeeper {
	mock := &ObserverAuthorityKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
