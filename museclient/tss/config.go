package tss

import (
	"encoding/json"
	"os"
	"path/filepath"
	"strings"

	tsscommon "github.com/RWAs-labs/go-tss/common"
	"github.com/RWAs-labs/go-tss/messages"
	"github.com/bnb-chain/tss-lib/ecdsa/keygen"
	"github.com/multiformats/go-multiaddr"
	"github.com/pkg/errors"
	"github.com/rs/zerolog"
)

const (
	// Port is the default port for go-tss server.
	Port    = 6668
	Version = messages.VersionJoinPartyWithLeader
	Algo    = tsscommon.ECDSA
)

// MultiAddressFromString parses a string into a slice of addresses (for convenience).
func MultiAddressFromString(peer string) ([]multiaddr.Multiaddr, error) {
	if peer == "" {
		return nil, errors.New("peer is empty")
	}

	ma, err := multiaddr.NewMultiaddr(peer)
	if err != nil {
		return nil, err
	}

	return []multiaddr.Multiaddr{ma}, nil
}

// ResolvePreParamsFromPath resolves TSS pre-params from json config by path.
// Error indicates that the pre-params file is not found or invalid.
// FYI: pre-params are generated by keygen.GeneratePreParams.
func ResolvePreParamsFromPath(path string) (*keygen.LocalPreParams, error) {
	if path == "" {
		return nil, errors.New("pre-params path is empty")
	}

	path = filepath.Clean(path)

	raw, err := os.ReadFile(path)
	if err != nil {
		return nil, errors.Wrapf(err, "unable to read pre-params at %q", path)
	}

	var pp keygen.LocalPreParams
	if err = json.Unmarshal(raw, &pp); err != nil {
		return nil, errors.Wrapf(err, "unable to decode pre-params at %q", path)
	}

	return &pp, nil
}

// ParsePubKeysFromPath extracts public keys from tss directory.
// Example: `tssPath="~/.tss"`. Contents:
// localstate-musepub1addwnpepq2fdhcmfyv07s86djjca835l4f2n2ta0c7le6vnl508mseca2s9g6slj0gm.json
// Output: `musepub1addwnpepq2fdhcmfyv07s86djjca835l4f2n2ta0c7le6vnl508mseca2s9g6slj0gm`
func ParsePubKeysFromPath(tssPath string, logger zerolog.Logger) ([]PubKey, error) {
	const prefix = "localstate-"

	files, err := os.ReadDir(tssPath)
	if err != nil {
		return nil, errors.Wrap(err, "unable to read dir")
	}

	var shareFiles []os.DirEntry
	for _, file := range files {
		if !file.IsDir() && strings.HasPrefix(filepath.Base(file.Name()), prefix) {
			shareFiles = append(shareFiles, file)
		}
	}

	if len(shareFiles) == 0 {
		logger.Warn().Msg("No TSS key share files found")
		return nil, nil
	}

	logger.Info().Msgf("Found TSS %d key share files", len(shareFiles))

	result := []PubKey{}
	for _, entry := range shareFiles {
		filename := filepath.Base(entry.Name())

		if !strings.HasPrefix(filename, prefix) {
			logger.Warn().Msgf("Skipping file %s as it doesn't have %q prefix", prefix, filename)
			continue
		}

		if !strings.HasSuffix(filename, ".json") {
			logger.Warn().Msgf("Skipping file %s as it's not .json", filename)
			continue
		}

		bech32 := strings.TrimSuffix(strings.TrimPrefix(filename, prefix), ".json")

		pubKey, err := NewPubKeyFromBech32(bech32)
		if err != nil {
			logger.Error().Err(err).Msgf("Unable to create PubKey from %q", bech32)
			continue
		}

		result = append(result, pubKey)
	}

	if len(result) == 0 {
		logger.Warn().Msg("No valid TSS pub keys were found")
		return nil, nil
	}

	return result, nil
}
