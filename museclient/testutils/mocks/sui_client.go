// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/RWAs-labs/muse/museclient/chains/sui/client"

	mock "github.com/stretchr/testify/mock"

	models "github.com/block-vision/sui-go-sdk/models"

	sui "github.com/pattonkan/sui-go/sui"

	time "time"
)

// SuiClient is an autogenerated mock type for the suiClient type
type SuiClient struct {
	mock.Mock
}

// GetLatestCheckpoint provides a mock function with given fields: ctx
func (_m *SuiClient) GetLatestCheckpoint(ctx context.Context) (models.CheckpointResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestCheckpoint")
	}

	var r0 models.CheckpointResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.CheckpointResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.CheckpointResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.CheckpointResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectParsedData provides a mock function with given fields: ctx, objectID
func (_m *SuiClient) GetObjectParsedData(ctx context.Context, objectID string) (models.SuiParsedData, error) {
	ret := _m.Called(ctx, objectID)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectParsedData")
	}

	var r0 models.SuiParsedData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.SuiParsedData, error)); ok {
		return rf(ctx, objectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.SuiParsedData); ok {
		r0 = rf(ctx, objectID)
	} else {
		r0 = ret.Get(0).(models.SuiParsedData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOwnedObjectID provides a mock function with given fields: ctx, ownerAddress, structType
func (_m *SuiClient) GetOwnedObjectID(ctx context.Context, ownerAddress string, structType string) (string, error) {
	ret := _m.Called(ctx, ownerAddress, structType)

	if len(ret) == 0 {
		panic("no return value specified for GetOwnedObjectID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, ownerAddress, structType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, ownerAddress, structType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, ownerAddress, structType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuiCoinObjectRefs provides a mock function with given fields: ctx, owner, minBalanceMist
func (_m *SuiClient) GetSuiCoinObjectRefs(ctx context.Context, owner string, minBalanceMist uint64) ([]*sui.ObjectRef, error) {
	ret := _m.Called(ctx, owner, minBalanceMist)

	if len(ret) == 0 {
		panic("no return value specified for GetSuiCoinObjectRefs")
	}

	var r0 []*sui.ObjectRef
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) ([]*sui.ObjectRef, error)); ok {
		return rf(ctx, owner, minBalanceMist)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) []*sui.ObjectRef); ok {
		r0 = rf(ctx, owner, minBalanceMist)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sui.ObjectRef)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) error); ok {
		r1 = rf(ctx, owner, minBalanceMist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheck provides a mock function with given fields: ctx
func (_m *SuiClient) HealthCheck(ctx context.Context) (time.Time, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Time, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Time); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InspectTransactionBlock provides a mock function with given fields: ctx, req
func (_m *SuiClient) InspectTransactionBlock(ctx context.Context, req models.SuiDevInspectTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for InspectTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiDevInspectTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiDevInspectTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiDevInspectTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveCall provides a mock function with given fields: ctx, req
func (_m *SuiClient) MoveCall(ctx context.Context, req models.MoveCallRequest) (models.TxnMetaData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MoveCall")
	}

	var r0 models.TxnMetaData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.MoveCallRequest) (models.TxnMetaData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.MoveCallRequest) models.TxnMetaData); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.TxnMetaData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.MoveCallRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryModuleEvents provides a mock function with given fields: ctx, q
func (_m *SuiClient) QueryModuleEvents(ctx context.Context, q client.EventQuery) ([]models.SuiEventResponse, string, error) {
	ret := _m.Called(ctx, q)

	if len(ret) == 0 {
		panic("no return value specified for QueryModuleEvents")
	}

	var r0 []models.SuiEventResponse
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, client.EventQuery) ([]models.SuiEventResponse, string, error)); ok {
		return rf(ctx, q)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.EventQuery) []models.SuiEventResponse); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SuiEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.EventQuery) string); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, client.EventQuery) error); ok {
		r2 = rf(ctx, q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SuiExecuteTransactionBlock provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiExecuteTransactionBlock(ctx context.Context, req models.SuiExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiExecuteTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiExecuteTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiExecuteTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiExecuteTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiGetTransactionBlock provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiGetTransactionBlock(ctx context.Context, req models.SuiGetTransactionBlockRequest) (models.SuiTransactionBlockResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiGetTransactionBlock")
	}

	var r0 models.SuiTransactionBlockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetTransactionBlockRequest) (models.SuiTransactionBlockResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiGetTransactionBlockRequest) models.SuiTransactionBlockResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.SuiTransactionBlockResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiGetTransactionBlockRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiMultiGetObjects provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiMultiGetObjects(ctx context.Context, req models.SuiMultiGetObjectsRequest) ([]*models.SuiObjectResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiMultiGetObjects")
	}

	var r0 []*models.SuiObjectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiMultiGetObjectsRequest) ([]*models.SuiObjectResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiMultiGetObjectsRequest) []*models.SuiObjectResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SuiObjectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiMultiGetObjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetLatestSuiSystemState provides a mock function with given fields: ctx
func (_m *SuiClient) SuiXGetLatestSuiSystemState(ctx context.Context) (models.SuiSystemStateSummary, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetLatestSuiSystemState")
	}

	var r0 models.SuiSystemStateSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.SuiSystemStateSummary, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.SuiSystemStateSummary); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(models.SuiSystemStateSummary)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXGetReferenceGasPrice provides a mock function with given fields: ctx
func (_m *SuiClient) SuiXGetReferenceGasPrice(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SuiXGetReferenceGasPrice")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuiXQueryEvents provides a mock function with given fields: ctx, req
func (_m *SuiClient) SuiXQueryEvents(ctx context.Context, req models.SuiXQueryEventsRequest) (models.PaginatedEventsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SuiXQueryEvents")
	}

	var r0 models.PaginatedEventsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXQueryEventsRequest) (models.PaginatedEventsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.SuiXQueryEventsRequest) models.PaginatedEventsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(models.PaginatedEventsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.SuiXQueryEventsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSuiClient creates a new instance of SuiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSuiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SuiClient {
	mock := &SuiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
