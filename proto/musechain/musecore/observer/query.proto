syntax = "proto3";
package musechain.musecore.observer;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "musechain/musecore/observer/ballot.proto";
import "musechain/musecore/observer/blame.proto";
import "musechain/musecore/observer/chain_nonces.proto";
import "musechain/musecore/observer/crosschain_flags.proto";
import "musechain/musecore/observer/keygen.proto";
import "musechain/musecore/observer/node_account.proto";
import "musechain/musecore/observer/observer.proto";
import "musechain/musecore/observer/params.proto";
import "musechain/musecore/observer/pending_nonces.proto";
import "musechain/musecore/observer/tss.proto";
import "musechain/musecore/observer/operational.proto";
import "musechain/musecore/pkg/chains/chains.proto";
import "musechain/musecore/pkg/proofs/proofs.proto";
import "musechain/musecore/observer/tss_funds_migrator.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/RWAs-labs/muse/x/observer/types";

// Query defines the gRPC querier service.
service Query {
  option (cosmos.msg.v1.service) = true;
  // Query if a voter has voted for a ballot
  rpc HasVoted(QueryHasVotedRequest) returns (QueryHasVotedResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/has_voted/{ballot_identifier}/{voter_address}";
  }
  // Queries a list of VoterByIdentifier items.
  rpc BallotByIdentifier(QueryBallotByIdentifierRequest)
      returns (QueryBallotByIdentifierResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/ballot_by_identifier/{ballot_identifier}";
  }

  rpc BallotListForHeight(QueryBallotListForHeightRequest)
      returns (QueryBallotListForHeightResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/ballot_list_for_height/{height}";
  }

  // Queries a list of ObserversByChainAndType items.
  rpc ObserverSet(QueryObserverSet) returns (QueryObserverSetResponse) {
    option (google.api.http).get = "/muse-chain/observer/observer_set";
  }

  rpc SupportedChains(QuerySupportedChains)
      returns (QuerySupportedChainsResponse) {
    option (google.api.http).get = "/muse-chain/observer/supportedChains";
  }

  // Queries a list of GetChainParamsForChain items.
  rpc GetChainParamsForChain(QueryGetChainParamsForChainRequest)
      returns (QueryGetChainParamsForChainResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/get_chain_params_for_chain/{chain_id}";
  }

  // Queries a list of GetChainParams items.
  rpc GetChainParams(QueryGetChainParamsRequest)
      returns (QueryGetChainParamsResponse) {
    option (google.api.http).get = "/muse-chain/observer/get_chain_params";
  }

  // Queries a nodeAccount by index.
  rpc NodeAccount(QueryGetNodeAccountRequest)
      returns (QueryGetNodeAccountResponse) {
    option (google.api.http).get = "/muse-chain/observer/nodeAccount/{index}";
  }

  // Queries a list of nodeAccount items.
  rpc NodeAccountAll(QueryAllNodeAccountRequest)
      returns (QueryAllNodeAccountResponse) {
    option (google.api.http).get = "/muse-chain/observer/nodeAccount";
  }

  rpc CrosschainFlags(QueryGetCrosschainFlagsRequest)
      returns (QueryGetCrosschainFlagsResponse) {
    option (google.api.http).get = "/muse-chain/observer/crosschain_flags";
  }

  // Queries a keygen by index.
  rpc Keygen(QueryGetKeygenRequest) returns (QueryGetKeygenResponse) {
    option (google.api.http).get = "/muse-chain/observer/keygen";
  }

  // Queries a list of ShowObserverCount items.
  rpc ShowObserverCount(QueryShowObserverCountRequest)
      returns (QueryShowObserverCountResponse) {
    option (google.api.http).get =
        "/muse-chain/musecore/observer/show_observer_count";
  }

  // Queries a list of VoterByIdentifier items.
  rpc BlameByIdentifier(QueryBlameByIdentifierRequest)
      returns (QueryBlameByIdentifierResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/blame_by_identifier/{blame_identifier}";
  }

  // Queries a list of VoterByIdentifier items.
  rpc GetAllBlameRecords(QueryAllBlameRecordsRequest)
      returns (QueryAllBlameRecordsResponse) {
    option (google.api.http).get = "/muse-chain/observer/get_all_blame_records";
  }

  // Queries a list of VoterByIdentifier items.
  rpc BlamesByChainAndNonce(QueryBlameByChainAndNonceRequest)
      returns (QueryBlameByChainAndNonceResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/blame_by_chain_and_nonce/{chain_id}/{nonce}";
  }

  // Queries a list of GetTssAddress items.
  rpc GetTssAddress(QueryGetTssAddressRequest)
      returns (QueryGetTssAddressResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/get_tss_address/{bitcoin_chain_id}";
  }

  rpc GetTssAddressByFinalizedHeight(QueryGetTssAddressByFinalizedHeightRequest)
      returns (QueryGetTssAddressByFinalizedHeightResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/get_tss_address_historical/"
        "{finalized_muse_height}/{bitcoin_chain_id}";
  }

  // Queries a tSS by index.
  rpc TSS(QueryGetTSSRequest) returns (QueryGetTSSResponse) {
    option (google.api.http).get = "/muse-chain/observer/TSS";
  }

  rpc TssHistory(QueryTssHistoryRequest) returns (QueryTssHistoryResponse) {
    option (google.api.http).get = "/muse-chain/observer/tssHistory";
  }

  rpc PendingNoncesAll(QueryAllPendingNoncesRequest)
      returns (QueryAllPendingNoncesResponse) {
    option (google.api.http).get = "/muse-chain/observer/pendingNonces";
  }

  rpc PendingNoncesByChain(QueryPendingNoncesByChainRequest)
      returns (QueryPendingNoncesByChainResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/pendingNonces/{chain_id}";
  }

  // Queries a chainNonces by index.
  rpc ChainNonces(QueryGetChainNoncesRequest)
      returns (QueryGetChainNoncesResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/chainNonces/{chain_id}";
  }

  // Queries a list of chainNonces items.
  rpc ChainNoncesAll(QueryAllChainNoncesRequest)
      returns (QueryAllChainNoncesResponse) {
    option (google.api.http).get = "/muse-chain/observer/chainNonces";
  }
  // Queries the TssFundMigratorInfo for a specific chain
  rpc TssFundsMigratorInfo(QueryTssFundsMigratorInfoRequest)
      returns (QueryTssFundsMigratorInfoResponse) {
    option (google.api.http).get = "/muse-chain/observer/getTssFundsMigrator";
  }

  // Queries all TssFundMigratorInfo
  rpc TssFundsMigratorInfoAll(QueryTssFundsMigratorInfoAllRequest)
      returns (QueryTssFundsMigratorInfoAllResponse) {
    option (google.api.http).get =
        "/muse-chain/observer/getAllTssFundsMigrators";
  }

  // Queries operational flags
  rpc OperationalFlags(QueryOperationalFlagsRequest)
      returns (QueryOperationalFlagsResponse) {
    option (google.api.http).get = "/muse-chain/observer/operationalFlags";
  }

  // Query all ballots
  rpc Ballots(QueryBallotsRequest) returns (QueryBallotsResponse) {
    option (google.api.http).get = "/muse-chain/observer/ballots";
  }
}

message QueryBallotsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryBallotsResponse {
  repeated Ballot ballots = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryOperationalFlagsRequest {}

message QueryOperationalFlagsResponse {
  OperationalFlags operational_flags = 1 [ (gogoproto.nullable) = false ];
}

message QueryTssFundsMigratorInfoAllRequest {}

message QueryTssFundsMigratorInfoAllResponse {
  repeated TssFundMigratorInfo tss_funds_migrators = 1
      [ (gogoproto.nullable) = false ];
}

message QueryTssFundsMigratorInfoRequest { int64 chain_id = 1; }
message QueryTssFundsMigratorInfoResponse {
  TssFundMigratorInfo tss_funds_migrator = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetChainNoncesRequest { int64 chain_id = 1; }

message QueryGetChainNoncesResponse {
  ChainNonces ChainNonces = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllChainNoncesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllChainNoncesResponse {
  repeated ChainNonces ChainNonces = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllPendingNoncesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPendingNoncesResponse {
  repeated PendingNonces pending_nonces = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPendingNoncesByChainRequest { int64 chain_id = 1; }

message QueryPendingNoncesByChainResponse {
  PendingNonces pending_nonces = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetTSSRequest {}

message QueryGetTSSResponse { TSS TSS = 1 [ (gogoproto.nullable) = false ]; }

message QueryGetTssAddressRequest { int64 bitcoin_chain_id = 2; }

message QueryGetTssAddressResponse {
  string eth = 1;
  string btc = 2;
  string sui = 3;
}

message QueryGetTssAddressByFinalizedHeightRequest {
  int64 finalized_muse_height = 1;
  int64 bitcoin_chain_id = 2;
}

message QueryGetTssAddressByFinalizedHeightResponse {
  string eth = 1;
  string btc = 2;
  string sui = 3;
}

message QueryTssHistoryRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryTssHistoryResponse {
  repeated TSS tss_list = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryHasVotedRequest {
  string ballot_identifier = 1;
  string voter_address = 2;
}

message QueryHasVotedResponse { bool has_voted = 1; }

message QueryBallotByIdentifierRequest { string ballot_identifier = 1; }

message VoterList {
  string voter_address = 1;
  VoteType vote_type = 2;
}

message QueryBallotByIdentifierResponse {
  string ballot_identifier = 1;
  repeated VoterList voters = 2;
  ObservationType observation_type = 3;
  BallotStatus ballot_status = 4;
}

message QueryObserverSet {}

message QueryObserverSetResponse { repeated string observers = 1; }

message QuerySupportedChains {}

message QuerySupportedChainsResponse {
  repeated pkg.chains.Chain chains = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetChainParamsForChainRequest { int64 chain_id = 1; }

message QueryGetChainParamsForChainResponse { ChainParams chain_params = 1; }

message QueryGetChainParamsRequest {}

message QueryGetChainParamsResponse { ChainParamsList chain_params = 1; }

message QueryGetNodeAccountRequest { string index = 1; }

message QueryGetNodeAccountResponse { NodeAccount node_account = 1; }

message QueryAllNodeAccountRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNodeAccountResponse {
  repeated NodeAccount NodeAccount = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCrosschainFlagsRequest {}

message QueryGetCrosschainFlagsResponse {
  CrosschainFlags crosschain_flags = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetKeygenRequest {}

message QueryGetKeygenResponse { Keygen keygen = 1; }

message QueryShowObserverCountRequest {}

message QueryShowObserverCountResponse {
  LastObserverCount last_observer_count = 1;
}

message QueryBlameByIdentifierRequest { string blame_identifier = 1; }

message QueryBlameByIdentifierResponse { Blame blame_info = 1; }

message QueryAllBlameRecordsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlameRecordsResponse {
  repeated Blame blame_info = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryBlameByChainAndNonceRequest {
  int64 chain_id = 1;
  int64 nonce = 2;
}

message QueryBlameByChainAndNonceResponse { repeated Blame blame_info = 1; }

message QueryBallotListForHeightRequest { int64 height = 1; }

message QueryBallotListForHeightResponse {
  BallotListForHeight ballot_list = 1 [ (gogoproto.nullable) = false ];
}
