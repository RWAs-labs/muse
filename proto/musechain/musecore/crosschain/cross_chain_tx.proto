syntax = "proto3";
package musechain.musecore.crosschain;

import "gogoproto/gogo.proto";
import "musechain/musecore/pkg/coin/coin.proto";

option go_package = "github.com/RWAs-labs/muse/x/crosschain/types";

enum CctxStatus {
  option (gogoproto.goproto_enum_stringer) = true;
  PendingInbound = 0;  // some observer sees inbound tx
  PendingOutbound = 1; // super majority observer see inbound tx
  OutboundMined = 3;   // the corresponding outbound tx is mined
  PendingRevert = 4;   // outbound cannot succeed; should revert inbound
  Reverted = 5;        // inbound reverted.
  Aborted =
      6; // inbound tx error or invalid paramters and cannot revert; just abort.
         // But the amount can be refunded to musechain using and admin proposal
}

enum TxFinalizationStatus {
  option (gogoproto.goproto_enum_stringer) = true;
  NotFinalized = 0; // the corresponding tx is not finalized
  Finalized = 1;    // the corresponding tx is finalized but not executed yet
  Executed = 2;     // the corresponding tx is executed
}

enum ConfirmationMode {
  option (gogoproto.goproto_enum_stringer) = true;
  SAFE = 0; // an inbound/outbound is confirmed using safe confirmation count
  FAST = 1; // an inbound/outbound is confirmed using fast confirmation count
}

// InboundStatus represents the status of an observed inbound
enum InboundStatus {
  option (gogoproto.goproto_enum_stringer) = true;
  SUCCESS = 0;
  // this field is specifically for Bitcoin when the deposit amount is less than
  // depositor fee
  INSUFFICIENT_DEPOSITOR_FEE = 1;
  // the receiver address parsed from the inbound is invalid
  INVALID_RECEIVER_ADDRESS = 2;
  // parse memo is invalid
  INVALID_MEMO = 3;
}

message InboundParams {
  string sender = 1; // this address is the immediate contract/EOA that calls
  // the Connector.send()
  int64 sender_chain_id = 2;
  string tx_origin = 3; // this address is the EOA that signs the inbound tx
  pkg.coin.CoinType coin_type = 4;
  string asset =
      5; // for ERC20 coin type, the asset is an address of the ERC20 contract
  string amount = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false
  ];
  string observed_hash = 7;
  uint64 observed_external_height = 8;
  string ballot_index = 9;
  uint64 finalized_muse_height = 10;
  TxFinalizationStatus tx_finalization_status = 11;

  // this field describes if a smart contract call should be made for a inbound
  // with assets only used for protocol contract version 2
  bool is_cross_chain_call = 12;

  // status of the inbound observation
  InboundStatus status = 20;

  // confirmation mode used for the inbound
  ConfirmationMode confirmation_mode = 21;

  // not used. do not edit.
  reserved 13 to 19;
}

message MuseAccounting {
  // aborted_muse_amount stores the total aborted amount for cctx of coin-type
  // MUSE
  string aborted_muse_amount = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false
  ];
}

message CallOptions {
  uint64 gas_limit = 1;
  bool is_arbitrary_call = 2;
}

message OutboundParams {
  string receiver = 1;
  int64 receiver_chainId = 2;
  pkg.coin.CoinType coin_type = 3;
  string amount = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false
  ];
  uint64 tss_nonce = 5;
  // Deprecated (v21), use CallOptions
  uint64 gas_limit = 6;
  string gas_price = 7;
  string gas_priority_fee = 23;
  // the above are commands for museclients
  // the following fields are used when the outbound tx is mined
  string hash = 8;
  string ballot_index = 9;
  uint64 observed_external_height = 10;
  uint64 gas_used = 20;
  string effective_gas_price = 21 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  uint64 effective_gas_limit = 22;
  string tss_pubkey = 11;
  TxFinalizationStatus tx_finalization_status = 12;

  CallOptions call_options = 24;

  // confirmation mode used for the outbound
  ConfirmationMode confirmation_mode = 25;

  // not used. do not edit.
  reserved 13 to 19;
}

message Status {
  CctxStatus status = 1;
  // status_message carries information about the status transitions:
  // why they were triggered, old and new status.
  string status_message = 2;
  // error_message carries information about the error that caused the tx
  // to be PendingRevert, Reverted or Aborted.
  string error_message = 6;
  int64 lastUpdate_timestamp = 3;
  bool isAbortRefunded = 4;
  // when the CCTX was created. only populated on new transactions.
  int64 created_timestamp = 5;
  // error_message_revert carries information about the revert outbound tx ,
  // which is created if the first outbound tx fails
  string error_message_revert = 7;
  // error_message_abort carries information when aborting the CCTX fails
  string error_message_abort = 8;
}

// ProtocolContractVersion represents the version of the protocol contract used
// for cctx workflow
enum ProtocolContractVersion {
  option (gogoproto.goproto_enum_stringer) = true;
  V1 = 0;
  V2 = 1;
}

// RevertOptions represents the options for reverting a cctx
message RevertOptions {
  string revert_address = 1;
  bool call_on_revert = 2;
  string abort_address = 3;
  bytes revert_message = 4;
  string revert_gas_limit = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false
  ];
}

message CrossChainTx {
  string creator = 1;
  string index = 2;
  string muse_fees = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Uint",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"muse_fees\""
  ];
  string relayed_message = 6; // Not used by protocol , just relayed across
  Status cctx_status = 8;
  InboundParams inbound_params = 9;
  repeated OutboundParams outbound_params = 10;
  ProtocolContractVersion protocol_contract_version = 11;
  RevertOptions revert_options = 12 [ (gogoproto.nullable) = false ];
}
