syntax = "proto3";
package musechain.musecore.emissions;

import "cosmos/base/query/v1beta1/pagination.proto";
import "musechain/musecore/emissions/params.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/RWAs-labs/muse/x/emissions/types";

// Query defines the gRPC querier service.
service Query {
  option (cosmos.msg.v1.service) = true;
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/muse-chain/emissions/params";
  }
  // Queries a list of ListBalances items.
  rpc ListPoolAddresses(QueryListPoolAddressesRequest)
      returns (QueryListPoolAddressesResponse) {
    option (google.api.http).get = "/muse-chain/emissions/list_addresses";
  }

  // Queries a list of ShowAvailableEmissions items.
  rpc ShowAvailableEmissions(QueryShowAvailableEmissionsRequest)
      returns (QueryShowAvailableEmissionsResponse) {
    option (google.api.http).get =
        "/muse-chain/emissions/show_available_emissions/{address}";
  }

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryListPoolAddressesRequest {}

message QueryListPoolAddressesResponse {
  string undistributed_observer_balances_address = 1;
  string undistributed_tss_balances_address = 2;
  string emission_module_address = 3;
}

message QueryShowAvailableEmissionsRequest { string address = 1; }

message QueryShowAvailableEmissionsResponse { string amount = 1; }

// this line is used by starport scaffolding # 3
